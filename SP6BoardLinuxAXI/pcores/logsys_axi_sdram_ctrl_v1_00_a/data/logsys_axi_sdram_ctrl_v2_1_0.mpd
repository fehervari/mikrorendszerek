###################################################################
##
## Name     : logsys_axi_sdram_ctrl
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN logsys_axi_sdram_ctrl

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = LOGSYS_AXI_SDRAM_CTRL
OPTION LONG_DESC = AXI4 SDRAM controller for the LOGSYS Spartan-6 FPGA board.
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## I/O Interfaces
IO_INTERFACE IO_IF = logsys_mem_0, IO_TYPE = LOGSYS_MEM_V1

## AXI interface parameters.
PARAMETER C_FAMILY = virtex6, DT = STRING, TYPE = NON_HDL
PARAMETER C_S_AXI_PROTOCOL = AXI4, DT = STRING, BUS = S_AXI, VALUES = (AXI4 = AXI4)
PARAMETER C_S_AXI_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_ADDR_WIDTH = 25, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, ASSIGNMENT = CONSTANT, BUS = S_AXI, TYPE = NON_HDL, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL AXI4])
PARAMETER C_S_AXI_ACLK_PERIOD_PS = 10000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = s_axi_aclk, CLK_UNIT = PS, ASSIGNMENT = REQUIRE
PARAMETER C_INTERCONNECT_S_AXI_AR_REGISTER = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI
PARAMETER C_INTERCONNECT_S_AXI_AW_REGISTER = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI
PARAMETER C_INTERCONNECT_S_AXI_B_REGISTER = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI
PARAMETER C_INTERCONNECT_S_AXI_R_REGISTER = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI
PARAMETER C_INTERCONNECT_S_AXI_W_REGISTER = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI
PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 16, DT = INTEGER, RANGE = (1:16), TYPE = NON_HDL, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL AXI4])
PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 16, DT = INTEGER, RANGE = (1:16), TYPE = NON_HDL, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL AXI4])

## SDRAM timing parameters
PARAMETER C_T_SDRAM_RP_NS = 20, DT = INTEGER
PARAMETER C_T_SDRAM_RFC_NS = 66, DT = INTEGER
PARAMETER C_T_SDRAM_RMD_CLK = 2, DT = INTEGER
PARAMETER C_T_SDRAM_RCD_NS = 20, DT = INTEGER
PARAMETER C_T_SDRAM_RC_NS = 66, DT = INTEGER
PARAMETER C_T_SDRAM_RAS_MIN_NS = 42, DT = INTEGER
PARAMETER C_T_SDRAM_RAS_MAX_NS  = 100000, DT = INTEGER
PARAMETER C_T_SDRAM_REFRESH_MS = 64, DT = INTEGER, RANGE = (16, 64)
PARAMETER C_SDRAM_REFRESH_BURST = 8, DT = INTEGER, RANGE = (2:15)
PARAMETER C_SDRAM_CAS_LATENCY = 2, DT = INTEGER, RANGE = (2, 3)

## Clock signals
PORT s_axi_aclk2x = "", DIR = I, SIGIS = CLK

## Memory interface ports
PORT mem_addr  = "", DIR = O,  VEC = [17:0], IO_IF = logsys_mem_0
PORT mem_data  = "", DIR = IO, VEC = [15:0], THREE_STATE = TRUE, ENABLE = MULTI, IO_IF = logsys_mem_0
PORT mem_wen   = "", DIR = O,  IO_IF = logsys_mem_0
PORT mem_lbn   = "", DIR = O,  IO_IF = logsys_mem_0
PORT mem_ubn   = "", DIR = O,  IO_IF = logsys_mem_0
PORT sram_csn  = "", DIR = O,  IO_IF = logsys_mem_0
PORT sram_oen  = "", DIR = O,  IO_IF = logsys_mem_0
PORT sdram_clk = "", DIR = O,  IO_IF = logsys_mem_0
PORT sdram_cke = "", DIR = O,  IO_IF = logsys_mem_0
PORT sdram_csn = "", DIR = O,  IO_IF = logsys_mem_0
PORT init_done = "", DIR = O

## AXI ports
PORT s_axi_aclk = "", DIR = I, BUS = S_AXI, SIGIS = CLK
PORT s_axi_aresetn = ARESETN, DIR = I, BUS = S_AXI, SIGIS = RST
PORT s_axi_awid = AWID, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH - 1) : 0], ENDIAN = LITTLE
PORT s_axi_awaddr = AWADDR, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE
PORT s_axi_awlen = AWLEN, DIR = I, BUS = S_AXI, VEC = [7 : 0], ENDIAN = LITTLE
PORT s_axi_awsize = AWSIZE, DIR = I, BUS = S_AXI, VEC = [2 : 0], ENDIAN = LITTLE
PORT s_axi_awburst = AWBURST, DIR = I, BUS = S_AXI, VEC = [1 : 0], ENDIAN = LITTLE
PORT s_axi_awlock = AWLOCK, DIR = I, BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_awcache = AWCACHE, DIR = I, BUS = S_AXI, VEC = [3 : 0], ENDIAN = LITTLE
PORT s_axi_awprot = AWPROT, DIR = I, BUS = S_AXI, VEC = [2 : 0], ENDIAN = LITTLE
PORT s_axi_awvalid = AWVALID, DIR = I, BUS = S_AXI
PORT s_axi_awready = AWREADY, DIR = O, BUS = S_AXI
PORT s_axi_wdata = WDATA, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_DATA_WIDTH - 1) : 0], ENDIAN = LITTLE
PORT s_axi_wstrb = WSTRB, DIR = I, BUS = S_AXI, VEC = [((C_S_AXI_DATA_WIDTH / 8) - 1) : 0], ENDIAN = LITTLE
PORT s_axi_wlast = WLAST, DIR = I, BUS = S_AXI
PORT s_axi_wvalid = WVALID, DIR = I, BUS = S_AXI
PORT s_axi_wready = WREADY, DIR = O, BUS = S_AXI
PORT s_axi_bid = BID, DIR = O, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH - 1) : 0], ENDIAN = LITTLE
PORT s_axi_bresp = BRESP, DIR = O, BUS = S_AXI, VEC = [1 : 0], ENDIAN = LITTLE
PORT s_axi_bvalid = BVALID, DIR = O, BUS = S_AXI
PORT s_axi_bready = BREADY, DIR = I, BUS = S_AXI
PORT s_axi_arid = ARID, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH - 1) : 0], ENDIAN = LITTLE
PORT s_axi_araddr = ARADDR, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ADDR_WIDTH - 1) : 0], ENDIAN = LITTLE
PORT s_axi_arlen = ARLEN, DIR = I, BUS = S_AXI, VEC = [7 : 0], ENDIAN = LITTLE
PORT s_axi_arsize = ARSIZE, DIR = I, BUS = S_AXI, VEC = [2 : 0], ENDIAN = LITTLE
PORT s_axi_arburst = ARBURST, DIR = I, BUS = S_AXI, VEC = [1 : 0], ENDIAN = LITTLE
PORT s_axi_arlock = ARLOCK, DIR = I, BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_arcache = ARCACHE, DIR = I, BUS = S_AXI, VEC = [3 : 0], ENDIAN = LITTLE
PORT s_axi_arprot = ARPROT, DIR = I, BUS = S_AXI, VEC = [2 : 0], ENDIAN = LITTLE
PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI
PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI
PORT s_axi_rid = RID, DIR = O, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH - 1) : 0], ENDIAN = LITTLE
PORT s_axi_rdata = RDATA, DIR = O, BUS = S_AXI, VEC = [(C_S_AXI_DATA_WIDTH - 1) : 0], ENDIAN = LITTLE
PORT s_axi_rresp = RRESP, DIR = O, BUS = S_AXI, VEC = [1 : 0], ENDIAN = LITTLE
PORT s_axi_rvalid = RVALID, DIR = O, BUS = S_AXI
PORT s_axi_rready = RREADY, DIR = I, BUS = S_AXI
PORT s_axi_rlast = RLAST, DIR = O, BUS = S_AXI

END
