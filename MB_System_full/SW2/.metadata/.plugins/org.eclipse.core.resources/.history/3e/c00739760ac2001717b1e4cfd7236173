/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "cpld.h"
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xtmrctr_l.h"
#include "xintc_l.h"

int led_value = 0x55;
void timer_int_handler(void*instancePtr)
{
	//Az új érték kiírása a LED-ekre.
	led_value = ~led_value;
	//write_CPLD_led(led_value);
	Xuint8 nav,dip;
	nav = read_CPLD_nav();
	dip = read_CPLD_dip();
	write_CPLD_seg(nav);
	write_CPLD_led(led_value);
	unsigned long csr;
	//A megszakítás jelzés törlése.
	csr = XTmrCtr_GetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR, 0);
	XTmrCtr_SetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR, 0, csr);
}
void start_interrupts(){
	XIntc_RegisterHandler( XPAR_INTC_0_BASEADDR, XPAR_MICROBLAZE_0_INTC_AXI_TIMER_0_INTERRUPT_INTR, (XInterruptHandler)timer_int_handler,NULL);
	//XIntc_RegisterHandler( XPAR_INTC_0_BASEADDR, XPAR_MICROBLAZE_0_INTC_LOGSYS_AXI_SP6_SIMPLEIO_0_IRQ_INTR,simpleio_int_handler,NULL);
	//XIntc_RegisterHandler( XPAR_INTC_0_BASEADDR, XPAR_MICROBLAZE_0_INTC_LVL_INDICATOR_0_IRQ_INTR,lvl_int_handler,NULL);

	//A megszakítás vezérlõ konfigurálása.
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR, XPAR_AXI_TIMER_0_INTERRUPT_MASK);// | XPAR_LOGSYS_AXI_SP6_SIMPLEIO_0_IRQ_MASK | XPAR_LVL_INDICATOR_0_IRQ_MASK);
	//MEM16(XPAR_LOGSYS_AXI_SP6_SIMPLEIO_0_BASEADDR +SIMPLEIO_IE_REG) = SIMPLEIO_BTN_CHANGED_IRQ;
	microblaze_enable_interrupts();


	//A timerLOAD regiszterének beállítása (megszakítás másodpercenként).
	XTmrCtr_SetLoadReg(XPAR_AXI_TIMER_0_BASEADDR, 0, XPAR_AXI_TIMER_0_CLOCK_FREQ_HZ );
	//A timeralapállapotba állítása.
	XTmrCtr_SetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR,   0,   XTC_CSR_INT_OCCURED_MASK     | XTC_CSR_LOAD_MASK    );
	//A timerelindítása.
	XTmrCtr_SetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR,    0,    XTC_CSR_ENABLE_TMR_MASK |     XTC_CSR_ENABLE_INT_MASK |    XTC_CSR_AUTO_RELOAD_MASK
	    													| XTC_CSR_DOWN_COUNT_MASK);

}

/*
void simpleio_int_handler(void*instancePtr)
{
	unsigned char ifr, btn;
	ifr = MEM8(XPAR_LOGSYS_AXI_SP6_SIMPLEIO_0_BASEADDR + SIMPLEIO_IF_REG);
	MEM8(XPAR_LOGSYS_AXI_SP6_SIMPLEIO_0_BASEADDR + SIMPLEIO_IF_REG) = ifr;

	if(ifr & SIMPLEIO_BTN_CHANGED_IRQ){
		btn = MEM8(XPAR_LOGSYS_AXI_SP6_SIMPLEIO_0_BASEADDR + SIMPLEIO_NAVSW_BTN_REG);
		if(btn &0x20)
			led_blink = 0;
	}
}
void lvl_int_handler(void*instancePtr)
{
	unsigned long ifr;

	ifr = MEM32(XPAR_LVL_INDICATOR_0_BASEADDR +LVL_STATUS_REG + LVL_IF_REG);
	MEM32(XPAR_LVL_INDICATOR_0_BASEADDR +LVL_STATUS_REG + LVL_IF_REG) = ifr;

	if(ifr & LVL_ERROR_IRQ){
		led_blink = 1;
	}
}*/

int main()
{
	CPLD_init;
    init_platform();
    Xuint8 nav,dip;

    start_interrupts();
    while(1);
    /*{
		nav = read_CPLD_nav();
		dip = read_CPLD_dip();
		write_CPLD_seg(nav);
		write_CPLD_led(dip);
    }//MEM16(CPLD_BASE_ADDR + 0x8) = 0x0FF0;*/
    return 0;
}
/*
int main()
{
	CPLD_init();
    init_platform();
    write_CPLD_led(0xff);
    //led_data = 1;
    //XGpio_Initialize(&leds,XPAR_LEDS_8BIT_DEVICE_ID);
   // XGpio_SetDataDirection(&leds, 1, 0x00);
    //XGpio_DiscreteWrite(&leds, 1, led_data);
    XIntc_RegisterHandler( XPAR_XPS_INTC_0_BASEADDR, XPAR_XPS_INTC_0_XPS_TIMER_0_INTERRUPT_INTR, (XInterruptHandler) timer_int_handler, NULL );

    XIntc_MasterEnable(XPAR_XPS_INTC_0_BASEADDR);
    XIntc_EnableIntr(XPAR_XPS_INTC_0_BASEADDR, XPAR_XPS_TIMER_0_INTERRUPT_MASK);

    microblaze_enable_interrupts();

    XTmrCtr_SetLoadReg(XPAR_XPS_TIMER_0_BASEADDR, 0, XPAR_PROC_BUS_0_FREQ_HZ/1000);

    XTmrCtr_SetControlStatusReg(XPAR_XPS_TIMER_0_BASEADDR,   0,   XTC_CSR_INT_OCCURED_MASK     | XTC_CSR_LOAD_MASK    );

    XTmrCtr_SetControlStatusReg(XPAR_XPS_TIMER_0_BASEADDR,    0,    XTC_CSR_ENABLE_TMR_MASK |     XTC_CSR_ENABLE_INT_MASK |    XTC_CSR_AUTO_RELOAD_MASK
    													| XTC_CSR_DOWN_COUNT_MASK);
    write_CPLD_led(0xff);


    while(1);
    return 0;
}
*/
