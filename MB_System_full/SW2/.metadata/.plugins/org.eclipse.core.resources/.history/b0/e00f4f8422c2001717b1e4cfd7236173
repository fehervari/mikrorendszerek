/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "cpld.h"
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xtmrctr_l.h"
#include "xintc_l.h"
#include "LCD.h"
#include "snake2.h"

int led_value = 0x55;
void timer_int_handler(void*instancePtr)
{
	//Az új érték kiírása a LED-ekre.
	led_value = ~led_value;
	write_CPLD_led(led_value);
	unsigned long csr;
	//A megszakítás jelzés törlése.
	csr = XTmrCtr_GetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR, 0);
	XTmrCtr_SetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR, 0, csr);
}

void CPLD_int_handler(void*instancePtr)
{
	Xuint8 nav;
	nav = read_CPLD_nav();
	write_CPLD_seg(nav);
}

void start_interrupts(int timer_freq){
	XIntc_RegisterHandler( XPAR_INTC_0_BASEADDR, XPAR_MICROBLAZE_0_INTC_AXI_TIMER_0_INTERRUPT_INTR,timer_int_handler,NULL);
	XIntc_RegisterHandler( XPAR_INTC_0_BASEADDR, XPAR_MICROBLAZE_0_INTC_CPLD_IF_0_IRQ_INTR        ,CPLD_int_handler ,NULL);
	XIntc_RegisterHandler( XPAR_INTC_0_BASEADDR, XPAR_MICROBLAZE_0_INTC_LCD_SCREEN_0_IRQ_INTR     ,lcd_IT_handler   ,NULL);

	//A megszakítás vezérlõ konfigurálása.
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR, XPAR_AXI_TIMER_0_INTERRUPT_MASK| XPAR_CPLD_IF_0_IRQ_MASK);//| XPAR_LCD_SCREEN_0_IRQ_MASK);

	MEM16(CPLD_BASE_ADDR +CPLD_STATUS_REG_OFFSET) = XPAR_CPLD_IF_0_IRQ_MASK;
	microblaze_enable_interrupts();


	//A timerLOAD regiszterének beállítása (megszakítás másodpercenként).
	XTmrCtr_SetLoadReg(XPAR_AXI_TIMER_0_BASEADDR, 0, XPAR_AXI_TIMER_0_CLOCK_FREQ_HZ / timer_freq );
	//A timeralapállapotba állítása.
	XTmrCtr_SetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR,   0,   XTC_CSR_INT_OCCURED_MASK     | XTC_CSR_LOAD_MASK    );
	//A timerelindítása.
	XTmrCtr_SetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR,    0,    XTC_CSR_ENABLE_TMR_MASK |     XTC_CSR_ENABLE_INT_MASK |    XTC_CSR_AUTO_RELOAD_MASK
	    													| XTC_CSR_DOWN_COUNT_MASK);

}




int main()
{
	CPLD_init();
    init_platform();
    itit_LCD(0);
    start_interrupts(1); // parameter = timer freq
	microblaze_enable_interrupts();

    clear_LCD();

    int k,i;
    for(k=0 ;k<8;k++)
	for(i= 1; i < 102; ++i)
	{
		write_Memory(k,i,snake3[k*102 + i]);
	}
    clear_LCD();
    while(1);
    return 0;
}
